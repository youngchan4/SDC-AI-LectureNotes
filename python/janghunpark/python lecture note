docker : 사용하는 프로그램의 버전을 맞춰줄 수 있는 것
개발자는 Docker를 사용하여 거의 모든 곳에서 실행할 수 있는 경량의, 이식성을 갖춘, 자립형 컨테이너형 애플리케이션을 손쉽게 빌드, 패키징, 제공 및 실행할 수 있습니다. 컨테이너를 사용하면 개발자가 모든 종속성으로 애플리케이션을 패키징하고 단일 단위로 배포할 수 있습니다. 사전에 구축되고 자체적으로 유지되는 애플리케이션 컨테이너를 제공함으로써 개발자는 기본 운영체제 또는 배포 시스템에 대한 걱정 없이 애플리케이션 코드 및 사용성에만 집중할 수 있습니다.

TCP? UDP?

네트워크를 타고 날아갔다가 돌아오는 데에 사용되는 것이 포트 번호 3306임(MySQL <-- 이것을 어떻게 아나?)
이 컴퓨터의 IP
192.168.20.3
포트 번호는 동일하게 3306 
사용하지 않는 포트의 경우 1~3분 정도 기다리면 초기화
리눅스의 경우 사용할 수 있는 포트가 6만개 이상, 배열 형태로 관리하고 있음
어떤 것이 사용 중이고 사용 중이지 않음을 알 수 있음

프로그램을 돌린다 = 메모리에 올린다
task가 있고 thread들도 별도의 task로 구분되어 있음
우리가 만들 서버는 곧 프로세스다, 서버는 절대 죽으면 안 된다. -> Demon process로 만들어야 함
Pid = process id, ppid = parent pid
TTY가 ?로 붙어 있는 애들은 터미널이 꺼져도 계속 구동되는 demon이 됨
대표적인 demon = ctrl + alt + delete = 작업관리자, 강제종료 = paladin 호출

mysql에 접근하기 위해서
pid를 찾아서 init 하면 

새로운 도메인으로 들어가는 것이기 때문에 일단 만들어보고 어떤 문제가 생기는지 파악

IoC로 인해 변경에 대한 유연함이 확보, 비용이 줄어듦
심지어 알고 있는 것이 아니기 때문에 그냥 layer만 구성해놓고 일단 가는 것임
추후 필요한 것이 발생 시 refactoring을 하는 것임

DDD 할 때 관심사의 분리
mocking 을 해버리면 내가 필요한 것은 다 있다고 가정하고 test 를 할 수 있음

우리 프로젝트와도 관련, 동기/비동기 데이터에 대한 처리를 잘 할 필요가 있음
blocking / non-blocking


